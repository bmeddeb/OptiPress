{
  "version": 3,
  "sources": ["../../src/js/batch-processor.js"],
  "sourcesContent": ["/**\n * Batch Processing JavaScript\n *\n * Handles AJAX-driven batch processing for image conversion, revert, and SVG sanitization.\n *\n * @package OptiPress\n */\n\n(function ($) {\n\t'use strict';\n\n\t/**\n\t * Batch Processor Object\n\t */\n\tvar OptipressBatchProcessor = {\n\t\t// Timer for debouncing stats refresh\n\t\tstatsRefreshTimer: null,\n\n\t\t/**\n\t\t * Initialize\n\t\t */\n\t\tinit: function () {\n\t\t\tthis.bindEvents();\n\t\t\tthis.debouncedLoadStats();\n\t\t},\n\n\t\t/**\n\t\t * Bind event handlers\n\t\t */\n\t\tbindEvents: function () {\n\t\t\t// Image conversion\n\t\t\t$('#optipress-start-batch').on('click', this.startBatchConversion.bind(this));\n\n\t\t\t// Revert images\n\t\t\t$('#optipress-revert-batch').on('click', this.startRevert.bind(this));\n\n\t\t\t// SVG sanitization\n\t\t\t$('#optipress-sanitize-svg-batch').on('click', this.startSvgSanitization.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Load batch statistics\n\t\t */\n\t\tloadStats: function () {\n\t\t\tvar self = this;\n\n\t\t\t$.ajax({\n\t\t\t\turl: ajaxurl,\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\taction: 'optipress_get_batch_stats',\n\t\t\t\t\tnonce: optipressAdmin.nonce,\n\t\t\t\t},\n\t\t\t\tsuccess: function (response) {\n\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\tself.updateStats(response.data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Load stats with debouncing to prevent excessive AJAX calls\n\t\t */\n\t\tdebouncedLoadStats: function () {\n\t\t\tvar self = this;\n\n\t\t\t// Clear existing timer\n\t\t\tif (this.statsRefreshTimer) {\n\t\t\t\tclearTimeout(this.statsRefreshTimer);\n\t\t\t}\n\n\t\t\t// Set new timer to load stats after 750ms of inactivity\n\t\t\tthis.statsRefreshTimer = setTimeout(function () {\n\t\t\t\tself.loadStats();\n\t\t\t}, 750);\n\t\t},\n\n\t\t/**\n\t\t * Update statistics display\n\t\t */\n\t\tupdateStats: function (stats) {\n\t\t\t// Update image conversion stats\n\t\t\t$('#optipress-total-images').text(stats.total || 0);\n\t\t\t$('#optipress-converted-images').text(stats.converted || 0);\n\t\t\t$('#optipress-remaining-images').text(stats.remaining || 0);\n\n\t\t\t// Update SVG stats\n\t\t\t$('#optipress-total-svgs').text(stats.svg_total || 0);\n\n\t\t\t// Enable/disable buttons\n\t\t\tif (stats.remaining > 0) {\n\t\t\t\t$('#optipress-start-batch').prop('disabled', false);\n\t\t\t} else {\n\t\t\t\t$('#optipress-start-batch').prop('disabled', true);\n\t\t\t}\n\n\t\t\tif (stats.converted > 0) {\n\t\t\t\t$('#optipress-revert-batch').prop('disabled', false);\n\t\t\t} else {\n\t\t\t\t$('#optipress-revert-batch').prop('disabled', true);\n\t\t\t}\n\n\t\t\tif (stats.svg_total > 0) {\n\t\t\t\t$('#optipress-sanitize-svg-batch').prop('disabled', false);\n\t\t\t} else {\n\t\t\t\t$('#optipress-sanitize-svg-batch').prop('disabled', true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Start batch conversion process\n\t\t */\n\t\tstartBatchConversion: function (e) {\n\t\t\te.preventDefault();\n\n\t\t\t// Ask for confirmation using non-blocking confirmation helper when available\n\t\t\tvar proceedWithBatch = function () {\n\t\t\t\tvar remaining = parseInt($('#optipress-remaining-images').text());\n\t\t\t\tvar total = remaining;\n\n\t\t\t\tthis.processBatch({\n\t\t\t\t\taction: 'optipress_process_batch',\n\t\t\t\t\tresultKey: 'processed',\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tprocessed: 0,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tprogressBar: '#optipress-batch-progress',\n\t\t\t\t\tstatusText: '#optipress-batch-status',\n\t\t\t\t\tresultArea: '#optipress-batch-result',\n\t\t\t\t\tbutton: '#optipress-start-batch',\n\t\t\t\t\tsuccessCallback: this.onBatchComplete.bind(this),\n\t\t\t\t\tprogressText: optipressAdmin.i18n.processing,\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tbatchCount: 0,\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\t// Use non-blocking confirmation helper (helper is enqueued as a dependency)\n\t\t\tOptipressNotices.createConfirm(optipressAdmin.i18n.confirmBatch).then(\n\t\t\t\tfunction (confirmed) {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tproceedWithBatch();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Start revert process\n\t\t */\n\t\tstartRevert: function (e) {\n\t\t\te.preventDefault();\n\n\t\t\tvar proceedWithRevert = function () {\n\t\t\t\tvar converted = parseInt($('#optipress-converted-images').text());\n\t\t\t\tvar total = converted;\n\n\t\t\t\tthis.processBatch({\n\t\t\t\t\taction: 'optipress_revert_images',\n\t\t\t\t\tresultKey: 'reverted',\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tprocessed: 0,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tprogressBar: '#optipress-revert-progress',\n\t\t\t\t\tstatusText: '#optipress-revert-status',\n\t\t\t\t\tresultArea: '#optipress-revert-result',\n\t\t\t\t\tbutton: '#optipress-revert-batch',\n\t\t\t\t\tsuccessCallback: this.onRevertComplete.bind(this),\n\t\t\t\t\tprogressText: optipressAdmin.i18n.reverting,\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tbatchCount: 0,\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tOptipressNotices.createConfirm(optipressAdmin.i18n.confirmRevert).then(\n\t\t\t\tfunction (confirmed) {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tproceedWithRevert();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Start SVG sanitization process\n\t\t */\n\t\tstartSvgSanitization: function (e) {\n\t\t\te.preventDefault();\n\n\t\t\tvar proceedWithSvg = function () {\n\t\t\t\tvar total = parseInt($('#optipress-total-svgs').text());\n\n\t\t\t\tthis.processBatch({\n\t\t\t\t\taction: 'optipress_sanitize_svg_batch',\n\t\t\t\t\tresultKey: 'sanitized',\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tprocessed: 0,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tprogressBar: '#optipress-svg-batch-progress',\n\t\t\t\t\tstatusText: '#optipress-svg-batch-status',\n\t\t\t\t\tresultArea: '#optipress-svg-batch-result',\n\t\t\t\t\tbutton: '#optipress-sanitize-svg-batch',\n\t\t\t\t\tsuccessCallback: this.onSvgBatchComplete.bind(this),\n\t\t\t\t\tprogressText: optipressAdmin.i18n.sanitizing,\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tbatchCount: 0,\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tOptipressNotices.createConfirm(optipressAdmin.i18n.confirmSvgBatch).then(\n\t\t\t\tfunction (confirmed) {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tproceedWithSvg();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Process a batch recursively\n\t\t */\n\t\tprocessBatch: function (options) {\n\t\t\tvar self = this;\n\t\t\tvar $progressBar = $(options.progressBar);\n\t\t\tvar $statusText = $(options.statusText);\n\t\t\tvar $resultArea = $(options.resultArea);\n\t\t\tvar $button = $(options.button);\n\n\t\t\t// Disable button\n\t\t\t$button.prop('disabled', true);\n\n\t\t\t// Hide result area and show progress on first run\n\t\t\tif (options.processed === 0) {\n\t\t\t\t$resultArea.hide();\n\t\t\t\t$progressBar.show().find('.optipress-progress-fill').css('width', '0%');\n\t\t\t\t$statusText\n\t\t\t\t\t.show()\n\t\t\t\t\t.removeClass('optipress-error optipress-success')\n\t\t\t\t\t.text(options.progressText + ' 0 / ' + options.total + ' (0%)');\n\t\t\t}\n\n\t\t\t// Increment batch counter\n\t\t\toptions.batchCount++;\n\n\t\t\t// Process chunk\n\t\t\tthis.processChunk(options, function (error, result) {\n\t\t\t\tif (error) {\n\t\t\t\t\t$statusText\n\t\t\t\t\t\t.text(optipressAdmin.i18n.error + ': ' + error)\n\t\t\t\t\t\t.addClass('optipress-error');\n\t\t\t\t\t$button.prop('disabled', false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Update processed count - use the correct result key based on operation type\n\t\t\t\tvar newlyProcessed = result[options.resultKey] || 0;\n\t\t\t\toptions.processed += newlyProcessed;\n\n\t\t\t\t// Calculate progress\n\t\t\t\tvar percentage = Math.min(\n\t\t\t\t\t100,\n\t\t\t\t\tMath.round((options.processed / options.total) * 100)\n\t\t\t\t);\n\n\t\t\t\t// Calculate time estimates (avoid division by zero)\n\t\t\t\tvar elapsed = (Date.now() - options.startTime) / 1000; // seconds\n\t\t\t\tvar timeText = '';\n\n\t\t\t\tif (options.processed > 0) {\n\t\t\t\t\tvar avgTimePerImage = elapsed / options.processed;\n\t\t\t\t\tvar remaining = options.total - options.processed;\n\t\t\t\t\tvar estimatedTimeLeft = Math.ceil(avgTimePerImage * remaining);\n\n\t\t\t\t\t// Format time remaining\n\t\t\t\t\tif (estimatedTimeLeft > 60) {\n\t\t\t\t\t\ttimeText = ' (~' + Math.ceil(estimatedTimeLeft / 60) + ' min remaining)';\n\t\t\t\t\t} else if (estimatedTimeLeft > 0) {\n\t\t\t\t\t\ttimeText = ' (~' + estimatedTimeLeft + ' sec remaining)';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update progress bar\n\t\t\t\t$progressBar.find('.optipress-progress-fill').css('width', percentage + '%');\n\n\t\t\t\t// Update status with detailed info\n\t\t\t\tvar statusMessage =\n\t\t\t\t\toptions.progressText +\n\t\t\t\t\t' ' +\n\t\t\t\t\toptions.processed +\n\t\t\t\t\t' / ' +\n\t\t\t\t\toptions.total +\n\t\t\t\t\t' (' +\n\t\t\t\t\tpercentage +\n\t\t\t\t\t'%)' +\n\t\t\t\t\ttimeText;\n\t\t\t\t$statusText.text(statusMessage);\n\n\t\t\t\t// Check if complete\n\t\t\t\tif (options.processed >= options.total || result.batch_size === 0) {\n\t\t\t\t\tvar totalTime = Math.ceil(elapsed);\n\t\t\t\t\tvar timeStr =\n\t\t\t\t\t\ttotalTime > 60\n\t\t\t\t\t\t\t? Math.ceil(totalTime / 60) + ' minutes'\n\t\t\t\t\t\t\t: totalTime + ' seconds';\n\n\t\t\t\t\t$statusText\n\t\t\t\t\t\t.text(\n\t\t\t\t\t\t\toptipressAdmin.i18n.complete +\n\t\t\t\t\t\t\t\t' ' +\n\t\t\t\t\t\t\t\toptions.processed +\n\t\t\t\t\t\t\t\t' / ' +\n\t\t\t\t\t\t\t\toptions.total +\n\t\t\t\t\t\t\t\t' (took ' +\n\t\t\t\t\t\t\t\ttimeStr +\n\t\t\t\t\t\t\t\t')'\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.removeClass('optipress-error')\n\t\t\t\t\t\t.addClass('optipress-success');\n\t\t\t\t\t$button.prop('disabled', false);\n\n\t\t\t\t\tif (options.successCallback) {\n\t\t\t\t\t\toptions.successCallback(options.processed, $resultArea);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Auto-dismiss status text and progress bar after 4 seconds\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t$statusText.fadeOut(200, function () {\n\t\t\t\t\t\t\t$(this).text('').hide().removeClass('optipress-success');\n\t\t\t\t\t\t});\n\t\t\t\t\t\t$progressBar.find('.optipress-progress-fill').css('width', '0%');\n\t\t\t\t\t\t$progressBar.fadeOut(200);\n\t\t\t\t\t}, 4000);\n\n\t\t\t\t\t// Reload stats after a short delay to ensure DB updates are complete\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tself.debouncedLoadStats();\n\t\t\t\t\t}, 500);\n\t\t\t\t} else {\n\t\t\t\t\t// Continue processing next batch\n\t\t\t\t\toptions.offset += result.batch_size; // Move offset by batch size (IDs fetched)\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tself.processBatch(options);\n\t\t\t\t\t}, 500); // Small delay to prevent server overload\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Process a single chunk\n\t\t */\n\t\tprocessChunk: function (options, callback) {\n\t\t\t$.ajax({\n\t\t\t\turl: ajaxurl,\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\taction: options.action,\n\t\t\t\t\tnonce: optipressAdmin.nonce,\n\t\t\t\t\toffset: options.offset,\n\t\t\t\t},\n\t\t\t\tsuccess: function (response) {\n\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\tcallback(null, response.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(response.data.message || optipressAdmin.i18n.unknownError);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function (xhr, status, error) {\n\t\t\t\t\tcallback(error || optipressAdmin.i18n.unknownError);\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Show local success message\n\t\t */\n\t\tshowLocalSuccess: function (message, $container) {\n\t\t\t$container\n\t\t\t\t.html(\n\t\t\t\t\t'<div class=\"optipress-local-notice optipress-local-notice-success\">' +\n\t\t\t\t\t\t'<span class=\"dashicons dashicons-yes-alt\"></span>' +\n\t\t\t\t\t\t'<span>' +\n\t\t\t\t\t\tmessage +\n\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t'</div>'\n\t\t\t\t)\n\t\t\t\t.show();\n\n\t\t\t// Auto-hide after 4 seconds\n\t\t\tsetTimeout(function () {\n\t\t\t\tvar $notice = $container.find('.optipress-local-notice');\n\t\t\t\t$notice.fadeOut(200, function () {\n\t\t\t\t\t$(this).remove();\n\t\t\t\t});\n\t\t\t}, 4000);\n\t\t},\n\n\t\t/**\n\t\t * Batch conversion complete callback\n\t\t */\n\t\tonBatchComplete: function (processed, $resultArea) {\n\t\t\tvar message = optipressAdmin.i18n.batchComplete.replace('%d', processed);\n\n\t\t\t// Show local message in result area\n\t\t\tthis.showLocalSuccess(message, $resultArea);\n\n\t\t\t// Also show at top for visibility (optional - can be removed if not desired)\n\t\t\tif (typeof wp !== 'undefined' && wp.data && wp.data.dispatch) {\n\t\t\t\ttry {\n\t\t\t\t\twp.data\n\t\t\t\t\t\t.dispatch('core/notices')\n\t\t\t\t\t\t.createNotice('success', message, { isDismissible: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fallback handled by local notice\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Revert complete callback\n\t\t */\n\t\tonRevertComplete: function (processed, $resultArea) {\n\t\t\tvar message = optipressAdmin.i18n.revertComplete.replace('%d', processed);\n\n\t\t\t// Show local message in result area\n\t\t\tthis.showLocalSuccess(message, $resultArea);\n\n\t\t\t// Also show at top for visibility (optional)\n\t\t\tif (typeof wp !== 'undefined' && wp.data && wp.data.dispatch) {\n\t\t\t\ttry {\n\t\t\t\t\twp.data\n\t\t\t\t\t\t.dispatch('core/notices')\n\t\t\t\t\t\t.createNotice('success', message, { isDismissible: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fallback handled by local notice\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * SVG batch complete callback\n\t\t */\n\t\tonSvgBatchComplete: function (processed, $resultArea) {\n\t\t\tvar message = optipressAdmin.i18n.svgBatchComplete.replace('%d', processed);\n\n\t\t\t// Show local message in result area\n\t\t\tthis.showLocalSuccess(message, $resultArea);\n\n\t\t\t// Also show at top for visibility (optional)\n\t\t\tif (typeof wp !== 'undefined' && wp.data && wp.data.dispatch) {\n\t\t\t\ttry {\n\t\t\t\t\twp.data\n\t\t\t\t\t\t.dispatch('core/notices')\n\t\t\t\t\t\t.createNotice('success', message, { isDismissible: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fallback handled by local notice\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n\n\t// Initialize on document ready\n\t$(document).ready(function () {\n\t\tif ($('.optipress-batch-section').length > 0) {\n\t\t\tOptipressBatchProcessor.init();\n\t\t}\n\t});\n})(jQuery);\n"],
  "mappings": "OAQC,SAAUA,EAAG,CACb,aAKA,IAAIC,EAA0B,CAE7B,kBAAmB,KAKnB,KAAM,UAAY,CACjB,KAAK,WAAW,EAChB,KAAK,mBAAmB,CACzB,EAKA,WAAY,UAAY,CAEvBD,EAAE,wBAAwB,EAAE,GAAG,QAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC,EAG5EA,EAAE,yBAAyB,EAAE,GAAG,QAAS,KAAK,YAAY,KAAK,IAAI,CAAC,EAGpEA,EAAE,+BAA+B,EAAE,GAAG,QAAS,KAAK,qBAAqB,KAAK,IAAI,CAAC,CACpF,EAKA,UAAW,UAAY,CACtB,IAAIE,EAAO,KAEXF,EAAE,KAAK,CACN,IAAK,QACL,KAAM,OACN,KAAM,CACL,OAAQ,4BACR,MAAO,eAAe,KACvB,EACA,QAAS,SAAUG,EAAU,CACxBA,EAAS,SACZD,EAAK,YAAYC,EAAS,IAAI,CAEhC,CACD,CAAC,CACF,EAKA,mBAAoB,UAAY,CAC/B,IAAID,EAAO,KAGP,KAAK,mBACR,aAAa,KAAK,iBAAiB,EAIpC,KAAK,kBAAoB,WAAW,UAAY,CAC/CA,EAAK,UAAU,CAChB,EAAG,GAAG,CACP,EAKA,YAAa,SAAUE,EAAO,CAE7BJ,EAAE,yBAAyB,EAAE,KAAKI,EAAM,OAAS,CAAC,EAClDJ,EAAE,6BAA6B,EAAE,KAAKI,EAAM,WAAa,CAAC,EAC1DJ,EAAE,6BAA6B,EAAE,KAAKI,EAAM,WAAa,CAAC,EAG1DJ,EAAE,uBAAuB,EAAE,KAAKI,EAAM,WAAa,CAAC,EAGhDA,EAAM,UAAY,EACrBJ,EAAE,wBAAwB,EAAE,KAAK,WAAY,EAAK,EAElDA,EAAE,wBAAwB,EAAE,KAAK,WAAY,EAAI,EAG9CI,EAAM,UAAY,EACrBJ,EAAE,yBAAyB,EAAE,KAAK,WAAY,EAAK,EAEnDA,EAAE,yBAAyB,EAAE,KAAK,WAAY,EAAI,EAG/CI,EAAM,UAAY,EACrBJ,EAAE,+BAA+B,EAAE,KAAK,WAAY,EAAK,EAEzDA,EAAE,+BAA+B,EAAE,KAAK,WAAY,EAAI,CAE1D,EAKA,qBAAsB,SAAUK,EAAG,CAClCA,EAAE,eAAe,EAGjB,IAAIC,EAAmB,UAAY,CAClC,IAAIC,EAAY,SAASP,EAAE,6BAA6B,EAAE,KAAK,CAAC,EAC5DQ,EAAQD,EAEZ,KAAK,aAAa,CACjB,OAAQ,0BACR,UAAW,YACX,MAAOC,EACP,UAAW,EACX,OAAQ,EACR,YAAa,4BACb,WAAY,0BACZ,WAAY,0BACZ,OAAQ,yBACR,gBAAiB,KAAK,gBAAgB,KAAK,IAAI,EAC/C,aAAc,eAAe,KAAK,WAClC,UAAW,KAAK,IAAI,EACpB,WAAY,CACb,CAAC,CACF,EAAE,KAAK,IAAI,EAGX,iBAAiB,cAAc,eAAe,KAAK,YAAY,EAAE,KAChE,SAAUC,EAAW,CAChBA,GACHH,EAAiB,CAEnB,CACD,CACD,EAKA,YAAa,SAAUD,EAAG,CACzBA,EAAE,eAAe,EAEjB,IAAIK,EAAoB,UAAY,CACnC,IAAIC,EAAY,SAASX,EAAE,6BAA6B,EAAE,KAAK,CAAC,EAC5DQ,EAAQG,EAEZ,KAAK,aAAa,CACjB,OAAQ,0BACR,UAAW,WACX,MAAOH,EACP,UAAW,EACX,OAAQ,EACR,YAAa,6BACb,WAAY,2BACZ,WAAY,2BACZ,OAAQ,0BACR,gBAAiB,KAAK,iBAAiB,KAAK,IAAI,EAChD,aAAc,eAAe,KAAK,UAClC,UAAW,KAAK,IAAI,EACpB,WAAY,CACb,CAAC,CACF,EAAE,KAAK,IAAI,EAEX,iBAAiB,cAAc,eAAe,KAAK,aAAa,EAAE,KACjE,SAAUC,EAAW,CAChBA,GACHC,EAAkB,CAEpB,CACD,CACD,EAKA,qBAAsB,SAAUL,EAAG,CAClCA,EAAE,eAAe,EAEjB,IAAIO,EAAiB,UAAY,CAChC,IAAIJ,EAAQ,SAASR,EAAE,uBAAuB,EAAE,KAAK,CAAC,EAEtD,KAAK,aAAa,CACjB,OAAQ,+BACR,UAAW,YACX,MAAOQ,EACP,UAAW,EACX,OAAQ,EACR,YAAa,gCACb,WAAY,8BACZ,WAAY,8BACZ,OAAQ,gCACR,gBAAiB,KAAK,mBAAmB,KAAK,IAAI,EAClD,aAAc,eAAe,KAAK,WAClC,UAAW,KAAK,IAAI,EACpB,WAAY,CACb,CAAC,CACF,EAAE,KAAK,IAAI,EAEX,iBAAiB,cAAc,eAAe,KAAK,eAAe,EAAE,KACnE,SAAUC,EAAW,CAChBA,GACHG,EAAe,CAEjB,CACD,CACD,EAKA,aAAc,SAAUC,EAAS,CAChC,IAAIX,EAAO,KACPY,EAAed,EAAEa,EAAQ,WAAW,EACpCE,EAAcf,EAAEa,EAAQ,UAAU,EAClCG,EAAchB,EAAEa,EAAQ,UAAU,EAClCI,EAAUjB,EAAEa,EAAQ,MAAM,EAG9BI,EAAQ,KAAK,WAAY,EAAI,EAGzBJ,EAAQ,YAAc,IACzBG,EAAY,KAAK,EACjBF,EAAa,KAAK,EAAE,KAAK,0BAA0B,EAAE,IAAI,QAAS,IAAI,EACtEC,EACE,KAAK,EACL,YAAY,mCAAmC,EAC/C,KAAKF,EAAQ,aAAe,QAAUA,EAAQ,MAAQ,OAAO,GAIhEA,EAAQ,aAGR,KAAK,aAAaA,EAAS,SAAUK,EAAOC,EAAQ,CACnD,GAAID,EAAO,CACVH,EACE,KAAK,eAAe,KAAK,MAAQ,KAAOG,CAAK,EAC7C,SAAS,iBAAiB,EAC5BD,EAAQ,KAAK,WAAY,EAAK,EAC9B,MACD,CAGA,IAAIG,EAAiBD,EAAON,EAAQ,SAAS,GAAK,EAClDA,EAAQ,WAAaO,EAGrB,IAAIC,EAAa,KAAK,IACrB,IACA,KAAK,MAAOR,EAAQ,UAAYA,EAAQ,MAAS,GAAG,CACrD,EAGIS,GAAW,KAAK,IAAI,EAAIT,EAAQ,WAAa,IAC7CU,EAAW,GAEf,GAAIV,EAAQ,UAAY,EAAG,CAC1B,IAAIW,EAAkBF,EAAUT,EAAQ,UACpCN,EAAYM,EAAQ,MAAQA,EAAQ,UACpCY,EAAoB,KAAK,KAAKD,EAAkBjB,CAAS,EAGzDkB,EAAoB,GACvBF,EAAW,MAAQ,KAAK,KAAKE,EAAoB,EAAE,EAAI,kBAC7CA,EAAoB,IAC9BF,EAAW,MAAQE,EAAoB,kBAEzC,CAGAX,EAAa,KAAK,0BAA0B,EAAE,IAAI,QAASO,EAAa,GAAG,EAG3E,IAAIK,EACHb,EAAQ,aACR,IACAA,EAAQ,UACR,MACAA,EAAQ,MACR,KACAQ,EACA,KACAE,EAID,GAHAR,EAAY,KAAKW,CAAa,EAG1Bb,EAAQ,WAAaA,EAAQ,OAASM,EAAO,aAAe,EAAG,CAClE,IAAIQ,EAAY,KAAK,KAAKL,CAAO,EAC7BM,EACHD,EAAY,GACT,KAAK,KAAKA,EAAY,EAAE,EAAI,WAC5BA,EAAY,WAEhBZ,EACE,KACA,eAAe,KAAK,SACnB,IACAF,EAAQ,UACR,MACAA,EAAQ,MACR,UACAe,EACA,GACF,EACC,YAAY,iBAAiB,EAC7B,SAAS,mBAAmB,EAC9BX,EAAQ,KAAK,WAAY,EAAK,EAE1BJ,EAAQ,iBACXA,EAAQ,gBAAgBA,EAAQ,UAAWG,CAAW,EAIvD,WAAW,UAAY,CACtBD,EAAY,QAAQ,IAAK,UAAY,CACpCf,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,YAAY,mBAAmB,CACxD,CAAC,EACDc,EAAa,KAAK,0BAA0B,EAAE,IAAI,QAAS,IAAI,EAC/DA,EAAa,QAAQ,GAAG,CACzB,EAAG,GAAI,EAGP,WAAW,UAAY,CACtBZ,EAAK,mBAAmB,CACzB,EAAG,GAAG,CACP,MAECW,EAAQ,QAAUM,EAAO,WACzB,WAAW,UAAY,CACtBjB,EAAK,aAAaW,CAAO,CAC1B,EAAG,GAAG,CAER,CAAC,CACF,EAKA,aAAc,SAAUA,EAASgB,EAAU,CAC1C7B,EAAE,KAAK,CACN,IAAK,QACL,KAAM,OACN,KAAM,CACL,OAAQa,EAAQ,OAChB,MAAO,eAAe,MACtB,OAAQA,EAAQ,MACjB,EACA,QAAS,SAAUV,EAAU,CACxBA,EAAS,QACZ0B,EAAS,KAAM1B,EAAS,IAAI,EAE5B0B,EAAS1B,EAAS,KAAK,SAAW,eAAe,KAAK,YAAY,CAEpE,EACA,MAAO,SAAU2B,EAAKC,EAAQb,EAAO,CACpCW,EAASX,GAAS,eAAe,KAAK,YAAY,CACnD,CACD,CAAC,CACF,EAKA,iBAAkB,SAAUc,EAASC,EAAY,CAChDA,EACE,KACA,6HAGCD,EACA,eAEF,EACC,KAAK,EAGP,WAAW,UAAY,CACtB,IAAIE,EAAUD,EAAW,KAAK,yBAAyB,EACvDC,EAAQ,QAAQ,IAAK,UAAY,CAChClC,EAAE,IAAI,EAAE,OAAO,CAChB,CAAC,CACF,EAAG,GAAI,CACR,EAKA,gBAAiB,SAAUmC,EAAWnB,EAAa,CAClD,IAAIgB,EAAU,eAAe,KAAK,cAAc,QAAQ,KAAMG,CAAS,EAMvE,GAHA,KAAK,iBAAiBH,EAAShB,CAAW,EAGtC,OAAO,IAAO,aAAe,GAAG,MAAQ,GAAG,KAAK,SACnD,GAAI,CACH,GAAG,KACD,SAAS,cAAc,EACvB,aAAa,UAAWgB,EAAS,CAAE,cAAe,EAAK,CAAC,CAC3D,OAAS3B,EAAG,CAEZ,CAEF,EAKA,iBAAkB,SAAU8B,EAAWnB,EAAa,CACnD,IAAIgB,EAAU,eAAe,KAAK,eAAe,QAAQ,KAAMG,CAAS,EAMxE,GAHA,KAAK,iBAAiBH,EAAShB,CAAW,EAGtC,OAAO,IAAO,aAAe,GAAG,MAAQ,GAAG,KAAK,SACnD,GAAI,CACH,GAAG,KACD,SAAS,cAAc,EACvB,aAAa,UAAWgB,EAAS,CAAE,cAAe,EAAK,CAAC,CAC3D,OAAS3B,EAAG,CAEZ,CAEF,EAKA,mBAAoB,SAAU8B,EAAWnB,EAAa,CACrD,IAAIgB,EAAU,eAAe,KAAK,iBAAiB,QAAQ,KAAMG,CAAS,EAM1E,GAHA,KAAK,iBAAiBH,EAAShB,CAAW,EAGtC,OAAO,IAAO,aAAe,GAAG,MAAQ,GAAG,KAAK,SACnD,GAAI,CACH,GAAG,KACD,SAAS,cAAc,EACvB,aAAa,UAAWgB,EAAS,CAAE,cAAe,EAAK,CAAC,CAC3D,OAAS3B,EAAG,CAEZ,CAEF,CACD,EAGAL,EAAE,QAAQ,EAAE,MAAM,UAAY,CACzBA,EAAE,0BAA0B,EAAE,OAAS,GAC1CC,EAAwB,KAAK,CAE/B,CAAC,CACF,GAAG,MAAM",
  "names": ["$", "OptipressBatchProcessor", "self", "response", "stats", "e", "proceedWithBatch", "remaining", "total", "confirmed", "proceedWithRevert", "converted", "proceedWithSvg", "options", "$progressBar", "$statusText", "$resultArea", "$button", "error", "result", "newlyProcessed", "percentage", "elapsed", "timeText", "avgTimePerImage", "estimatedTimeLeft", "statusMessage", "totalTime", "timeStr", "callback", "xhr", "status", "message", "$container", "$notice", "processed"]
}
