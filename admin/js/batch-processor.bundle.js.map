{
  "version": 3,
  "sources": ["../../src/js/batch-processor.js"],
  "sourcesContent": ["/**\n * Batch Processing JavaScript\n *\n * Handles AJAX-driven batch processing for image conversion, revert, and SVG sanitization.\n *\n * @package OptiPress\n */\n\n(function ($) {\n\t'use strict';\n\n\t/**\n\t * Batch Processor Object\n\t */\n\tvar OptipressBatchProcessor = {\n\t\t// Timer for debouncing stats refresh\n\t\tstatsRefreshTimer: null,\n\n\t\t/**\n\t\t * Initialize\n\t\t */\n\t\tinit: function () {\n\t\t\tthis.bindEvents();\n\t\t\tthis.debouncedLoadStats();\n\t\t},\n\n\t\t/**\n\t\t * Bind event handlers\n\t\t */\n\t\tbindEvents: function () {\n\t\t\t// Image conversion\n\t\t\t$('#optipress-start-batch').on('click', this.startBatchConversion.bind(this));\n\n\t\t\t// Revert images\n\t\t\t$('#optipress-revert-batch').on('click', this.startRevert.bind(this));\n\n\t\t\t// SVG sanitization\n\t\t\t$('#optipress-sanitize-svg-batch').on('click', this.startSvgSanitization.bind(this));\n\t\t},\n\n\t\t/**\n\t\t * Load batch statistics\n\t\t */\n\t\tloadStats: function () {\n\t\t\tvar self = this;\n\n\t\t\t$.ajax({\n\t\t\t\turl: ajaxurl,\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\taction: 'optipress_get_batch_stats',\n\t\t\t\t\tnonce: optipressAdmin.nonce,\n\t\t\t\t},\n\t\t\t\tsuccess: function (response) {\n\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\tself.updateStats(response.data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Load stats with debouncing to prevent excessive AJAX calls\n\t\t */\n\t\tdebouncedLoadStats: function () {\n\t\t\tvar self = this;\n\n\t\t\t// Clear existing timer\n\t\t\tif (this.statsRefreshTimer) {\n\t\t\t\tclearTimeout(this.statsRefreshTimer);\n\t\t\t}\n\n\t\t\t// Set new timer to load stats after 750ms of inactivity\n\t\t\tthis.statsRefreshTimer = setTimeout(function () {\n\t\t\t\tself.loadStats();\n\t\t\t}, 750);\n\t\t},\n\n\t\t/**\n\t\t * Update statistics display\n\t\t */\n\t\tupdateStats: function (stats) {\n\t\t\t// Update image conversion stats\n\t\t\t$('#optipress-total-images').text(stats.total || 0);\n\t\t\t$('#optipress-converted-images').text(stats.converted || 0);\n\t\t\t$('#optipress-remaining-images').text(stats.remaining || 0);\n\n\t\t\t// Update SVG stats\n\t\t\t$('#optipress-total-svgs').text(stats.svg_total || 0);\n\n\t\t\t// Enable/disable buttons\n\t\t\tif (stats.remaining > 0) {\n\t\t\t\t$('#optipress-start-batch').prop('disabled', false);\n\t\t\t} else {\n\t\t\t\t$('#optipress-start-batch').prop('disabled', true);\n\t\t\t}\n\n\t\t\tif (stats.converted > 0) {\n\t\t\t\t$('#optipress-revert-batch').prop('disabled', false);\n\t\t\t} else {\n\t\t\t\t$('#optipress-revert-batch').prop('disabled', true);\n\t\t\t}\n\n\t\t\tif (stats.svg_total > 0) {\n\t\t\t\t$('#optipress-sanitize-svg-batch').prop('disabled', false);\n\t\t\t} else {\n\t\t\t\t$('#optipress-sanitize-svg-batch').prop('disabled', true);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Start batch conversion process\n\t\t */\n\t\tstartBatchConversion: function (e) {\n\t\t\te.preventDefault();\n\n\t\t\t// Ask for confirmation using non-blocking confirmation helper when available\n\t\t\tvar proceedWithBatch = function () {\n\t\t\t\tvar remaining = parseInt($('#optipress-remaining-images').text());\n\t\t\t\tvar total = remaining;\n\n\t\t\t\tthis.processBatch({\n\t\t\t\t\taction: 'optipress_process_batch',\n\t\t\t\t\tresultKey: 'processed',\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tprocessed: 0,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tprogressBar: '#optipress-batch-progress',\n\t\t\t\t\tstatusText: '#optipress-batch-status',\n\t\t\t\t\tresultArea: '#optipress-batch-result',\n\t\t\t\t\tbutton: '#optipress-start-batch',\n\t\t\t\t\tsuccessCallback: this.onBatchComplete.bind(this),\n\t\t\t\t\tprogressText: optipressAdmin.i18n.processing,\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tbatchCount: 0,\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\t// Use non-blocking confirmation helper (helper is enqueued as a dependency)\n\t\t\tOptipressNotices.createConfirm(optipressAdmin.i18n.confirmBatch).then(\n\t\t\t\tfunction (confirmed) {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tproceedWithBatch();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Start revert process\n\t\t */\n\t\tstartRevert: function (e) {\n\t\t\te.preventDefault();\n\n\t\t\tvar proceedWithRevert = function () {\n\t\t\t\tvar converted = parseInt($('#optipress-converted-images').text());\n\t\t\t\tvar total = converted;\n\n\t\t\t\tthis.processBatch({\n\t\t\t\t\taction: 'optipress_revert_images',\n\t\t\t\t\tresultKey: 'reverted',\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tprocessed: 0,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tprogressBar: '#optipress-revert-progress',\n\t\t\t\t\tstatusText: '#optipress-revert-status',\n\t\t\t\t\tresultArea: '#optipress-revert-result',\n\t\t\t\t\tbutton: '#optipress-revert-batch',\n\t\t\t\t\tsuccessCallback: this.onRevertComplete.bind(this),\n\t\t\t\t\tprogressText: optipressAdmin.i18n.reverting,\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tbatchCount: 0,\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tOptipressNotices.createConfirm(optipressAdmin.i18n.confirmRevert).then(\n\t\t\t\tfunction (confirmed) {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tproceedWithRevert();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Start SVG sanitization process\n\t\t */\n\t\tstartSvgSanitization: function (e) {\n\t\t\te.preventDefault();\n\n\t\t\tvar proceedWithSvg = function () {\n\t\t\t\tvar total = parseInt($('#optipress-total-svgs').text());\n\n\t\t\t\tthis.processBatch({\n\t\t\t\t\taction: 'optipress_sanitize_svg_batch',\n\t\t\t\t\tresultKey: 'sanitized',\n\t\t\t\t\ttotal: total,\n\t\t\t\t\tprocessed: 0,\n\t\t\t\t\toffset: 0,\n\t\t\t\t\tprogressBar: '#optipress-svg-batch-progress',\n\t\t\t\t\tstatusText: '#optipress-svg-batch-status',\n\t\t\t\t\tresultArea: '#optipress-svg-batch-result',\n\t\t\t\t\tbutton: '#optipress-sanitize-svg-batch',\n\t\t\t\t\tsuccessCallback: this.onSvgBatchComplete.bind(this),\n\t\t\t\t\tprogressText: optipressAdmin.i18n.sanitizing,\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tbatchCount: 0,\n\t\t\t\t});\n\t\t\t}.bind(this);\n\n\t\t\tOptipressNotices.createConfirm(optipressAdmin.i18n.confirmSvgBatch).then(\n\t\t\t\tfunction (confirmed) {\n\t\t\t\t\tif (confirmed) {\n\t\t\t\t\t\tproceedWithSvg();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Process a batch recursively\n\t\t */\n\t\tprocessBatch: function (options) {\n\t\t\tvar self = this;\n\t\t\tvar $progressBar = $(options.progressBar);\n\t\t\tvar $statusText = $(options.statusText);\n\t\t\tvar $resultArea = $(options.resultArea);\n\t\t\tvar $button = $(options.button);\n\n\t\t\t// Disable button\n\t\t\t$button.prop('disabled', true);\n\n\t\t\t// Hide result area and show progress on first run\n\t\t\tif (options.processed === 0) {\n\t\t\t\t$resultArea.hide();\n\t\t\t\t$progressBar.show().find('.optipress-progress-fill').css('width', '0%');\n\t\t\t\t$statusText\n\t\t\t\t\t.show()\n\t\t\t\t\t.removeClass('optipress-error optipress-success')\n\t\t\t\t\t.text(options.progressText + ' 0 / ' + options.total + ' (0%)');\n\t\t\t}\n\n\t\t\t// Increment batch counter\n\t\t\toptions.batchCount++;\n\n\t\t\t// Process chunk\n\t\t\tthis.processChunk(options, function (error, result) {\n\t\t\t\tif (error) {\n\t\t\t\t\t$statusText\n\t\t\t\t\t\t.text(optipressAdmin.i18n.error + ': ' + error)\n\t\t\t\t\t\t.addClass('optipress-error');\n\t\t\t\t\t$button.prop('disabled', false);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Update processed count - use the correct result key based on operation type\n\t\t\t\tvar newlyProcessed = result[options.resultKey] || 0;\n\t\t\t\toptions.processed += newlyProcessed;\n\n\t\t\t\t// Calculate progress\n\t\t\t\tvar percentage = Math.min(\n\t\t\t\t\t100,\n\t\t\t\t\tMath.round((options.processed / options.total) * 100)\n\t\t\t\t);\n\n\t\t\t\t// Calculate time estimates (avoid division by zero)\n\t\t\t\tvar elapsed = (Date.now() - options.startTime) / 1000; // seconds\n\t\t\t\tvar timeText = '';\n\n\t\t\t\tif (options.processed > 0) {\n\t\t\t\t\tvar avgTimePerImage = elapsed / options.processed;\n\t\t\t\t\tvar remaining = options.total - options.processed;\n\t\t\t\t\tvar estimatedTimeLeft = Math.ceil(avgTimePerImage * remaining);\n\n\t\t\t\t\t// Format time remaining\n\t\t\t\t\tif (estimatedTimeLeft > 60) {\n\t\t\t\t\t\ttimeText = ' (~' + Math.ceil(estimatedTimeLeft / 60) + ' min remaining)';\n\t\t\t\t\t} else if (estimatedTimeLeft > 0) {\n\t\t\t\t\t\ttimeText = ' (~' + estimatedTimeLeft + ' sec remaining)';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update progress bar\n\t\t\t\t$progressBar.find('.optipress-progress-fill').css('width', percentage + '%');\n\n\t\t\t\t// Update status with detailed info\n\t\t\t\tvar statusMessage =\n\t\t\t\t\toptions.progressText +\n\t\t\t\t\t' ' +\n\t\t\t\t\toptions.processed +\n\t\t\t\t\t' / ' +\n\t\t\t\t\toptions.total +\n\t\t\t\t\t' (' +\n\t\t\t\t\tpercentage +\n\t\t\t\t\t'%)' +\n\t\t\t\t\ttimeText;\n\t\t\t\t$statusText.text(statusMessage);\n\n\t\t\t\t// Check if complete\n\t\t\t\tif (options.processed >= options.total || result.batch_size === 0) {\n\t\t\t\t\tvar totalTime = Math.ceil(elapsed);\n\t\t\t\t\tvar timeStr =\n\t\t\t\t\t\ttotalTime > 60\n\t\t\t\t\t\t\t? Math.ceil(totalTime / 60) + ' minutes'\n\t\t\t\t\t\t\t: totalTime + ' seconds';\n\n                $statusText\n                    .text(\n                        optipressAdmin.i18n.complete +\n                            ' ' +\n                            options.processed +\n                            ' / ' +\n                            options.total +\n                            ' (took ' +\n                            timeStr +\n                            ')'\n                    )\n                    .removeClass('optipress-error')\n                    .addClass('optipress-success');\n                $button.prop('disabled', false);\n\n                if (options.successCallback) {\n                    options.successCallback(options.processed, $resultArea);\n                }\n\n                // Auto-dismiss status text and progress bar after 4 seconds\n                setTimeout(function () {\n                    $statusText.fadeOut(200, function () {\n                        $(this).text('').hide().removeClass('optipress-success');\n                    });\n                    $progressBar.find('.optipress-progress-fill').css('width', '0%');\n                    $progressBar.fadeOut(200);\n                }, 4000);\n\n\t\t\t\t\t// Reload stats after a short delay to ensure DB updates are complete\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tself.debouncedLoadStats();\n\t\t\t\t\t}, 500);\n\t\t\t\t} else {\n\t\t\t\t\t// Continue processing next batch\n\t\t\t\t\toptions.offset += result.batch_size; // Move offset by batch size (IDs fetched)\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tself.processBatch(options);\n\t\t\t\t\t}, 500); // Small delay to prevent server overload\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Process a single chunk\n\t\t */\n\t\tprocessChunk: function (options, callback) {\n\t\t\t$.ajax({\n\t\t\t\turl: ajaxurl,\n\t\t\t\ttype: 'POST',\n\t\t\t\tdata: {\n\t\t\t\t\taction: options.action,\n\t\t\t\t\tnonce: optipressAdmin.nonce,\n\t\t\t\t\toffset: options.offset,\n\t\t\t\t},\n\t\t\t\tsuccess: function (response) {\n\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\tcallback(null, response.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback(response.data.message || optipressAdmin.i18n.unknownError);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: function (xhr, status, error) {\n\t\t\t\t\tcallback(error || optipressAdmin.i18n.unknownError);\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * Show local success message\n\t\t */\n\t\tshowLocalSuccess: function (message, $container) {\n\t\t\t$container\n\t\t\t\t.html(\n\t\t\t\t\t'<div class=\"optipress-local-notice optipress-local-notice-success\">' +\n\t\t\t\t\t\t'<span class=\"dashicons dashicons-yes-alt\"></span>' +\n\t\t\t\t\t\t'<span>' +\n\t\t\t\t\t\tmessage +\n\t\t\t\t\t\t'</span>' +\n\t\t\t\t\t\t'</div>'\n\t\t\t\t)\n\t\t\t\t.show();\n\n            // Auto-hide after 4 seconds\n            setTimeout(function () {\n                var $notice = $container.find('.optipress-local-notice');\n                $notice.fadeOut(200, function () {\n                    $(this).remove();\n                });\n            }, 4000);\n\t\t},\n\n\t\t/**\n\t\t * Batch conversion complete callback\n\t\t */\n\t\tonBatchComplete: function (processed, $resultArea) {\n\t\t\tvar message = optipressAdmin.i18n.batchComplete.replace('%d', processed);\n\n\t\t\t// Show local message in result area\n\t\t\tthis.showLocalSuccess(message, $resultArea);\n\n\t\t\t// Also show at top for visibility (optional - can be removed if not desired)\n\t\t\tif (typeof wp !== 'undefined' && wp.data && wp.data.dispatch) {\n\t\t\t\ttry {\n\t\t\t\t\twp.data\n\t\t\t\t\t\t.dispatch('core/notices')\n\t\t\t\t\t\t.createNotice('success', message, { isDismissible: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fallback handled by local notice\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Revert complete callback\n\t\t */\n\t\tonRevertComplete: function (processed, $resultArea) {\n\t\t\tvar message = optipressAdmin.i18n.revertComplete.replace('%d', processed);\n\n\t\t\t// Show local message in result area\n\t\t\tthis.showLocalSuccess(message, $resultArea);\n\n\t\t\t// Also show at top for visibility (optional)\n\t\t\tif (typeof wp !== 'undefined' && wp.data && wp.data.dispatch) {\n\t\t\t\ttry {\n\t\t\t\t\twp.data\n\t\t\t\t\t\t.dispatch('core/notices')\n\t\t\t\t\t\t.createNotice('success', message, { isDismissible: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fallback handled by local notice\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * SVG batch complete callback\n\t\t */\n\t\tonSvgBatchComplete: function (processed, $resultArea) {\n\t\t\tvar message = optipressAdmin.i18n.svgBatchComplete.replace('%d', processed);\n\n\t\t\t// Show local message in result area\n\t\t\tthis.showLocalSuccess(message, $resultArea);\n\n\t\t\t// Also show at top for visibility (optional)\n\t\t\tif (typeof wp !== 'undefined' && wp.data && wp.data.dispatch) {\n\t\t\t\ttry {\n\t\t\t\t\twp.data\n\t\t\t\t\t\t.dispatch('core/notices')\n\t\t\t\t\t\t.createNotice('success', message, { isDismissible: true });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Fallback handled by local notice\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n\n\t// Initialize on document ready\n\t$(document).ready(function () {\n\t\tif ($('.optipress-batch-section').length > 0) {\n\t\t\tOptipressBatchProcessor.init();\n\t\t}\n\t});\n})(jQuery);\n"],
  "mappings": "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",
  "names": []
}
